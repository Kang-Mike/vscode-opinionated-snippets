{
	"new Promise": {
		"prefix": "pr",
		"body": ["const ${1:promise} = new Promise((resolve, reject) => {", "\t${2}", "});", ""],
		"description": "Promise\n"
	},
  "Promise.all()": {
		"prefix": "pra",
		"body": ["const results = await Promise.all([${1:promises}]);"],
		"description": "The `Promise.all()` method takes an iterable of promises as an input, and returns a single Promise that resolves to an array of the results of the input promises.\n"
	},
  "Promise.reject()": {
		"prefix": "prj",
		"body": ["Promise.reject(${1:reason});", ""],
		"description": "Promise.reject\n"
	},
	"Promise.resolve()": {
		"prefix": "prs",
		"body": ["Promise.resolve(${1:value});", ""],
		"description": "Promise.resolve\n"
	},
	"return promise": {
		"prefix": "rpr",
		"body": ["return new Promise((resolve, reject) => {\n\t${1}\n})"],
		"description": "Return a new Promise\n"
	},
  "then": {
		"prefix": "then",
		"body": ["then((${1:res}) => {", "\t${0}", "})", ""],
		"description": "Then\n"
	},
  "catch": {
		"prefix": "catch",
		"body": ["catch((${1:err}) => {", "\t${0}", "})", ""],
		"description": "Catch\n"
	},
  "finally": {
		"prefix": "finally",
		"body": ["finally(() => {", "\t${0}", "})", ""],
		"description": "Finally\n"
	}
}
